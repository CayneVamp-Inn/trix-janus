Network
	{netname} - User-readable name for the network
	{klines} - array of Kline objects
	connect([sock]) - try to connect to the network or use the given sock as a connection from the network
	id() - network's tag, must be unique
	nick(name) - returns a currently existing nick of this name
	channel(name, [new]) - returns a channel of this name, optionally creating if $new is 1, destroying if -1
	request_nick(Nick, request) - gives the Nick a local network name, based on the requested one
	release_nick(nickname) - this nick is now unused

Unreal (or other network implementations)
	intro([incoming]) - send out server introduction/password
	parse(line) - create a list of Action objects based on a line of input
		not all input lines must create an action; local connects do not
	send(Action ...) - send the given Action objects to the given network
	vhost(Nick) - get the current visible host of the given nick

Channel
	{nicks} - Nick objects by ID
	{nmode} - string like 'qo' by ID of nick
	str(Network) - this channel's name
	link(Channel) - unify the channels; the passed-in object should be dropped from reference
	try_join(Nick) - joins the nick to the channel; returns 1 for success and 0 if they were kicked (glined)
	part(Nick) - removes the nick from the channel. Destroys if unlinked and 0 members
	timesync(int) - sets the timestamp; wipes the modes of the channel if the int is lower than stored stamp
	act(Action) - state change hook for TOPIC/MODE
	send(Network except, Action) - sendto_all_butone

Nick
	{homenick nickts ident host ip name} - basic info; also {swhois home_server servicets chost vhost ip_64}
	{homenet} - this nick's origin (individual networks can add more info to their Nick objects)
	id() - nick's tag, must be unique
	vhost() - user's visible host (cloaked or vhost); {host} is actual host
	umode(delta) - change umodes
	is_klined(Network) - returns a kline from the given net matching this nick, if any
	connect(Network) - join to the given network (check klines before doing this please)
	act(Action) - state change hook for NICK/NICKINFO
	postact(Action) - cleanup after QUIT
	send(Network except, Action) - sendto_all_butone

Kline
	{reason}
	{net}
	{expire}
	match(Nick)

Actions:
NICKINFO: Nick -> Nick
	item - one of 'host ident name mode swhois'
	value - string to set

MSG: Nick -> [Nick, Channel]
	msg - message
	notice - 1 if this is a NOTICE, 0 if PRIVMSG
	prefix - undef or one of '~&@%+' for @#channel messages

NICK: Nick -> Nick
	nick - new base nick; after passing to Nick::act - 
	from{$id} - source nick for network $id
	to{$id} - destination nick for network $id

QUIT: Nick -> Nick - Quit or local-network kill
	msg - message

KILL: [Nick, Network] -> Nick - Cross-Network kill
	msg - message

JOIN: Nick -> Channel
	mode - subset of 'qaohv' to apply at join

MODE: [Nick, Network] -> Channel
	mode - first part of NORMAL modestring
	args - subsequent strings

KICK: [Nick, Network] -> Channel
	kickee - Nick
	reason - reason
