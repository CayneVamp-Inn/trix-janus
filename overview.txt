Network
	{netname} - User-readable name for the network
	{klines} - array of Kline objects
	connect([sock]) - try to connect to the network or use the given sock as a connection from the network
	id() - network's tag, must be unique
	item(name) - return a Nick, Channel, or Network for the nick, channel, or server name given
	nick(name) - returns a currently existing nick of this name
	channel(name, [new]) - returns a channel of this name, optionally creating if $new is 1, destroying if -1
	request_nick(Nick, request) - gives the Nick a local network name, based on the requested one
	release_nick(nickname) - this nick is now unused

Unreal (or other network implementations)
	intro([incoming]) - send out server introduction/password
	parse(line) - create a list of Action objects based on a line of input
		not all input lines must create an action; local connects do not
	send(Action ...) - send the given Action objects to the given network
	vhost(Nick) - get the current visible host of the given nick

Channel
	{nicks} - Nick objects by ID
	{nets} - Network objects by ID
	str(Network) - this channel's name
	link(Channel) - unify the channels; the passed-in object should be dropped from reference
	try_join(Nick) - joins the nick to the channel; returns the action (JOIN or KICK)
	timesync(int) - sets the timestamp; wipes the modes of the channel if the int is lower than stored stamp

Nick
	{homenet} - source Network for the nick
	{homenick nickts ident host ip name} - basic info
 		for Unreal nicks: {swhois home_server servicets chost vhost ip_64}
	id() - nick's tag, must be unique
	vhost() - user's visible host (cloaked or vhost); {host} is actual host
	umode(delta) - change umodes
	is_klined(Network) - returns a kline from the given net matching this nick, if any
	is_on(Network) - true if the nick is on the network already
	connect(Network) - join to the given network (check klines before doing this please)

Kline
	{reason}
	{net}
	{expire}
	match(Nick)

Actions: see actions.txt
