Special fields:
	sendto: an arrayref identifying the list of networks to send to
		specify this only when creating the action
		Exception: LINK and DELINK, as they do the list merging needed
	nojlink: do not send to remote janus networks
		used i.e. for QUITs from a NETSPLIT, where the NETSPLIT itself is sent
		across the jlink, so sending the QUITs too would be a waste of bandwidth

type: src -> dst; action source/notes

dst must be Nick or Channel. Can be undef if {sendto} is specified.
src must be either a Nick, Network, or undef

CONNECT: * -> Nick; no IJ
	nick connection to remote network, sent before a join
	net - Network to connect to

RECONNECT: * -> Nick; no IJ
	reconnection, spawned by the network itself on a nick collision or a services-based action. Forces nick tag on reintroduction
	net - Network to connect to
	killed - true if the local network believes the nick to be gone, false if
		a nick change would suffice

QUIT: * -> Nick
	msg - quit message (already prefixed with Quit: if needed)
	killer - Nick that did a local kill on the dst nick
		(in this case, msg is "Killed ($msg)")

KILL: * -> Nick
	only for cross-janus kills; is locally translated to kicks on all channels
	that the nick is on that are also on the given network
	msg - kill message
	net - network to remove the nick from

NICK: * -> Nick
	nick change only; new clients do not cause an event, see CONNECT
	nick - new base nick
	After the act hook in Nick, all local networks have members in hashes:
	from{$id} - source nick for network $id
	to{$id} - destination nick for network $id

NICKINFO: * -> Nick
	item - one of 'vhost ident name swhois away'
	value - string to set

UMODE: * -> Nick
	value - mode change string

JOIN: Nick -> Channel; also sent on netsplit recoveries, channel links
	mode - hash of n_ channel modes to apply during the join (optional)

PART: Nick -> Channel; also sent on delink as 'Channel delinked'
	msg - part message

KICK: * -> Channel
	kickee - Nick
	reason - reason

MODE: * -> Channel; also sent on channel link
	mode - array representing +/- items
		Ex: qw/-r_invite +v_key +n_op -n_voice/
	args - array of arguments (either strings or Nicks)
		Ex: ['secret', Nick::me, Nick::annoying]
	Channel mode prefix meanings:
		n - nick access level (voice)
		l - list (ban)
		v - value (key)
		s - value-on-set (limit)
		r - regular (invite)

TOPIC: * -> Channel; also sent on link
	topic - topic
	topicts - set timestamp of topic
	topicset - STRING of topic setter

MSG: [Nick, undef] -> *
	msgtype - Message type
		1 - PRIVMSG
		2 - NOTICE
		NNN - a numeric reply code (RFC 2812, section 5.1)
	prefix - if exists, is one of '~&@%+' for @#channel messages
	msg - message text, or if msgtype is NNN, an array of items
		for the message's response

WHOIS: Nick -> Nick
	remote /whois query, will be answered with numeric-typed MSG events

LINKED: * -> [ all networks, in sendto ]
	Network has successfully synchronized itself and will now start linking channels
	net - Network

BANLINE: * -> Network
	action - either '+' or '-'
	nick, ident, host - matches needed to ban
	reason - reason for adding the ban
	setter - string of the ban's source
	expire - timestamp that this ban expires; 0 for no expiry

-------------------------------------------------------------------------------
Virtual actions:

REHASH: Nick -> []
	rehashes the current janus

LINKREQ: * -> Network
	chan - Channel object being offered (for inter-janus channel sync)
	net - source network
	slink - channel name on source network
	dlink - channel name on dest network

LSYNC: * -> Network
	Note: this action makes no sense until you look at InterJanus
	Atomically creates the unified channel and ***
	linkto - the NAME of the channel to link, on the dest network
	chan - the other channel to link

LINK: * -> Channel
	chan1, chan2 - channel objects to merge into the destination

DELINK: * -> Channel
	net - Network to drop
	split - split off channel (only exists after the act stage is complete)

NETLINK:
	Event sent when a new network is potentially linked. Note that this will happen
	before the connection is complete, and will therefore include unavailable networks.
	Must be sent by Janus::linked
	net - new network

NETSPLIT:
	Event sent when a network (in any state) is delinked.
	Must be sent by Janus::delink
	net - gone network

PING: undef -> Network
	send a ping request to the network to check link that the link is alive

